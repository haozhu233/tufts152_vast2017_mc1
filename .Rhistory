mutate(Name = sub('|\\n              \\n              ', '', Name))
View(dt)
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name))
View(dt)
dt$Name
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\.tar\\.bz2$', '', Name))
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\_0\\.tar\\.bz2$', '', Name))
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\_0\\.tar\\.bz2$', '', Name)) %>%
separate(Name, c('sys', 'ver'), sep = '/')
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\_0\\.tar\\.bz2$', '', Name)) %>%
separate(Name, c('sys', 'ver'), sep = '/') %>%
separate(ver, c('trash', 'ver', 'env')) %>%
select(-trash)
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\_0\\.tar\\.bz2$', '', Name)) %>%
separate(Name, c('sys', 'ver'), sep = '/') %>%
separate(ver, c('trash', 'ver', 'env'), sep = '-') %>%
select(-trash)
substr(dt$Size[1], -2, -1)
substr(dt$Size[1], -3, -1)
substr(dt$Size[1], 1, 2)
substr(dt$Size[1], length(dt$Size[1]) - 2, length(dt$Size[1]))
substr(dt$Size[1], nchar(dt$Size[1]) - 2, nchar(dt$Size[1]))
substr(dt$Size[1], nchar(dt$Size[1]) - 1, nchar(dt$Size[1]))
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\_0\\.tar\\.bz2$', '', Name)) %>%
separate(Name, c('sys', 'ver'), sep = '/') %>%
separate(ver, c('trash', 'ver', 'env'), sep = '-') %>%
separate(Size, c('size', 'size_unit'), sep = ' ') %>%
mutate(size = ifelse(size_unit == "MB", size / 1024, size)) %>%
select(-trash)
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\_0\\.tar\\.bz2$', '', Name)) %>%
separate(Name, c('sys', 'ver'), sep = '/') %>%
separate(ver, c('trash', 'ver', 'env'), sep = '-') %>%
separate(Size, c('size', 'size_unit'), sep = ' ')
dt = tables %>%
mutate(Name = sub('\\|\\n              \\n              ', '', Name),
Name = sub('\\_0\\.tar\\.bz2$', '', Name)) %>%
separate(Name, c('sys', 'ver'), sep = '/') %>%
separate(ver, c('trash', 'ver', 'env'), sep = '-') %>%
separate(Size, c('size', 'size_unit'), sep = ' ') %>%
mutate(
size = as.numeric(size),
size = ifelse(size_unit == "MB", size / 1024, size)) %>%
select(-trash)
ggplot(dt, aes(x = ver, y = size))+
geom_point()
ggplot(dt, aes(x = ver, y = size, color = sys))+
geom_point()
View(dt)
dt = read_csv("processed_data.csv") %>%
mutate(gate_id = as.character(gate_id))
View(dt)
unique(dt$`gate-name`)
aaa = data.frame(gates = unique(dt$`gate-name`), x = 0, y = 0) %>% arrange(gates)
write_csv(aaa, "gate_loc.csv")
library(tidyverse)
dt = read_csv("processed_data.csv")
dt
dt %>%
filter(gate_type == "entrance")
dt = read_csv("Lekagul Sensor Data.csv")
dt
View(dt)
dt %>%
filter(`car-id` == '20154301124328-262') %>%
View()
dt %>%
filter(`car-id` == '20153101013141-937') %>%
View()
dt %>%
separate(Timestamp, c('date', 'time'))
dt %>%
separate(Timestamp, c('date', 'time'), sep = ' ')
dt = read_csv("Lekagul Sensor Data.csv")
library(lubridate)
dt %>%
mutate(Timestamp = lubridate::as_datetime(Timestamp))
dt2 = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp)
)
View(dt2)
day(dt2$Timestamp)
lubridate::wday(dt2$Timestamp[0])
lubridate::wday(dt2$Timestamp[100])
lubridate::wday(dt2$Timestamp)
dt2 = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp),
hr = lubridate::hour(Timestamp),
weekday = lubridate::wday(Timestamp)
)
View(dt2)
dt = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp),
hr = lubridate::hour(Timestamp),
weekday = lubridate::wday(Timestamp)
)
dt %>%
group_by(`car-id`, date) %>%
count()
dt %>%
group_by(`car-id`) %>%
summarise(
n_days = len(unique(date))
)
dt %>%
group_by(`car-id`) %>%
summarise(
n_days = length(unique(date))
)
dt %>%
group_by(`car-id`) %>%
summarise(
n_days = length(unique(date))
) %>%
arrange(n_days)
dt %>%
group_by(`car-id`) %>%
summarise(
n_days = length(unique(date))
) %>%
arrange(desc(n_days))
dt %>% filter(`car-id` == '20154519024544-322')
dt %>% filter(`car-id` == '20154519024544-322') %>% View()
unique(dt$`gate-name`)
dt = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp),
hr = lubridate::hour(Timestamp),
weekday = lubridate::wday(Timestamp),
gate_type = stringr::str_remove(`gate-name`, '[0-9]$')
)
View(dt)
nested_dt = dt %>%
group_by(`car-id`) %>%
nested()
nested_dt = dt %>%
group_by(`car-id`) %>%
nest()
View(nested_dt)
View(nested_dt[[2]][[1]])
View(nested_dt[[2]][[12]])
separate_visit = function(gate_types) {
out = integer(length(gate_types))
visit_num = 0
seen = 0
for (i in seq(length(gate_types))) {
out[i] = visit_num
if (gate_types[i] == "entrance") {
if (seen == 0) {
seen = 1
} else {
seen = 0
visit_num = visit_num + 1
}
}
}
return(out)
}
View(nested_dt[[2]][[10]])
View(nested_dt[[2]][[6]])
View(nested_dt[[2]][[185]])
View(nested_dt[[2]][[250]])
View(nested_dt[[2]][[308]])
View(nested_dt[[2]][[304]])
View(nested_dt[[2]][[296]])
nested_dt %>% mutate(data = map_int(data, ~nrow(.x)))
nested_dt %>% mutate(data = map_int(data, ~nrow(.x))) %>% arrange(desc(data))
nest_dt %>% filter(`car-id` == '20154112014114-381')
nested_dt %>% filter(`car-id` == '20154112014114-381')
nested_dt %>% filter(`car-id` == '20154112014114-381') %>% View()
View(.[[2]][[1]])
View(.[[2]][[1]])
separate_visit((nested_dt %>% filter(`car-id` == '20154112014114-381'))$gate_type)
(nested_dt %>% filter(`car-id` == '20154112014114-381'))$gate_type
(nested_dt %>% filter(`car-id` == '20154112014114-381'))
(nested_dt %>% filter(`car-id` == '20154112014114-381'))$data$gate_type
(nested_dt %>% filter(`car-id` == '20154112014114-381'))$data
(nested_dt %>% filter(`car-id` == '20154112014114-381'))$data[[1]]$gate_type
separate_visit((nested_dt %>% filter(`car-id` == '20154112014114-381'))$data[[1]]$gate_type)
(nested_dt %>% filter(`car-id` == '20154112014114-381'))$data[[1]]
(nested_dt %>% filter(`car-id` == '20154112014114-381'))$data[[1]] %>% View()
nested_dt = nested_dt %>%
mutate(data = map(data, ~ .x$visit = separate_visit(.x$gate_type)))
})
nested_dt = nested_dt %>%
mutate(data = map(data, function(x) {
x$visit = separate_visit(x$gate_type)
return(x)
}))
View(nested_dt)
View(nested_dt[[2]][[1]])
dt2 = unnest(nested_dt)
dt2 = unnest(nested_dt, cols = c(data))
View(dt2)
nested_dt = nested_dt %>%
mutate(data = map(data, function(x) {
x$visit = separate_visit(x$gate_type)
x$total_visit_count = max(x$visit) + 1
return(x)
}))
dt2 = unnest(nested_dt, cols = c(data))
View(dt2)
dt2 %>%
arrange(desc(total_visit_count))
library(tidyverse)
library(lubridate)
separate_visit = function(gate_types) {
out = integer(length(gate_types))
visit_num = 0
seen = 0
for (i in seq(length(gate_types))) {
out[i] = visit_num
if (gate_types[i] == "entrance") {
if (seen == 0) {
seen = 1
} else {
seen = 0
visit_num = visit_num + 1
}
}
}
return(out)
}
separate_visit((nested_dt %>% filter(`car-id` == '20154112014114-381'))$data[[1]]$gate_type)
dt = read_csv("Lekagul Sensor Data.csv")
dt = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp),
hr = lubridate::hour(Timestamp),
weekday = lubridate::wday(Timestamp),
gate_type = stringr::str_remove(`gate-name`, '[0-9]$')
)
nested_dt = dt %>%
group_by(`car-id`) %>%
nest()
nested_dt = nested_dt %>%
mutate(data = map(data, function(x) {
x$visit = separate_visit(x$gate_type)
x$total_visit_count = max(x$visit) + 1
return(x)
}))
View(nested_dt)
View(nested_dt[[2]][[1]])
dt2 = unnest(nested_dt, cols = c(data))
dt2 %>%
arrange(desc(total_visit_count))
View(dt2)
dt = unnest(nested_dt, cols = c(data))
View(dt)
dt %>%
group_by(`car-id`, visit) %>%
summarise(
duration = Timestamp[n()] - Timestamp[1]
)
unique(dt$gate_type)
per_visit = dt %>%
group_by(`car-id`, `car-type`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()]
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1]) / 3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate"),
)
per_visit = dt %>%
group_by(`car-id`, `car-type`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()]
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1]) / 3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
per_visit = dt %>%
group_by(`car-id`, `car-type`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()]
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1]) / 3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
per_visit = dt %>%
group_by(`car-id`, `car-type`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()]
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1])/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
per_visit = dt %>%
group_by(`car-id`, `car-type`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1])/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
dt = unnest(nested_dt, cols = c(data)) %>%
ungroup()
per_visit = dt %>%
group_by(`car-id`, `car-type`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1])/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
View(per_visit)
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1])/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
View(per_visit)
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(Timestamp[n()] - Timestamp[1]),
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
View(per_visit)
dt$Timestamp[2] - dt$Timestamp[1]
lubridate::as.duration(dt$Timestamp[2] - dt$Timestamp[1])
lubridate::hour(dt$Timestamp[2] - dt$Timestamp[1])
lubridate::dhours(dt$Timestamp[2] - dt$Timestamp[1])
lubridate::dhours(as.duration(dt$Timestamp[2] - dt$Timestamp[1]))
dt$Timestamp[2] - dt$Timestamp[1]
as.duration(dt$Timestamp[2] - dt$Timestamp[1])
as.numeric(as.duration(dt$Timestamp[2] - dt$Timestamp[1]))
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(as.duration(Timestamp[n()] - Timestamp[1]))/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_gate = sum(gate_type == "gate")
)
write_csv(per_visit, 'per_visit.csv')
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(as.duration(Timestamp[n()] - Timestamp[1]))/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_campting = sum(gate_type == "camping"),
num_rangerbase = sum(gate_type == "ranger-base"),
num_gate = sum(gate_type == "gate")
)
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(as.duration(Timestamp[n()] - Timestamp[1]))/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_camping = sum(gate_type == "camping"),
num_rangerbase = sum(gate_type == "ranger-base"),
num_gate = sum(gate_type == "gate")
)
per_car = per_visit %>%
group_by(`car-type`, `car-id`) %>%
summarise(
total_visit = n()
total_stay_duration = sum(stay_duration),
total_stops = sum(stops),
total_num_generalgate = sum(num_generalgate),
total_num_rangerstop = sum(num_rangerstop),
total_num_camping = sum(num_camping),
total_num_rangerbase = sum(num_rangerbase),
total_num_gate = sum(num_gate),
)
per_car = per_visit %>%
group_by(`car-type`, `car-id`) %>%
summarise(
total_visit = n(),
total_stay_duration = sum(stay_duration),
total_stops = sum(stops),
total_num_generalgate = sum(num_generalgate),
total_num_rangerstop = sum(num_rangerstop),
total_num_camping = sum(num_camping),
total_num_rangerbase = sum(num_rangerbase),
total_num_gate = sum(num_gate)
)
View(per_car)
per_visit = left_join(per_visit, per_car, by = c('car-type', 'car-id'))
write_csv(per_car, 'per_car.csv')
write_csv(per_visit, 'per_visit.csv')
install.packages("reticulate")
reticulate::use_condaenv('py38')
reticulate::use_miniconda('~/miniforge3/bin/conda')
reticulate::use_condaenv('~/miniforge3/envs/py38')
library(reticulate)
library(reticulate)
reticulate::import('numpy', 'np')
reticulate::import('pandas', 'pd')
reticulate::import('sklearn.manifold.TSNE')
View(per_visit)
View(per_visit)
View(per_visit)
dt %>%
filter(gate_type == "gate" & `car-type` != "2P")
dt %>%
filter(gate_type == "gate" & `car-type` != "2P") %>%
View()
aaa = dt %>%
filter(gate_type == "gate" & `car-type` != "2P")
per_car %>%
filter(`car-id` %in% unique(aaa$`car-id`)) %>%
View()
View(aaa)
View(per_car)
library(kableExtra)
kable(mtcars, 'latex', booktabs = T, caption = "aaa")
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa")
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling()
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(table.envir = 'centering')
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', )
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}\n", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}.*\n", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}[^\n.]*\n", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', )
MySeq <- "ATGTGTTGCTGG"
library(stringi)
stri_sub(MySeq, seq(1, stri_length(MySeq), by=3), length=3)
