reticulate::import('sklearn.manifold.TSNE')
View(per_visit)
View(per_visit)
View(per_visit)
dt %>%
filter(gate_type == "gate" & `car-type` != "2P")
dt %>%
filter(gate_type == "gate" & `car-type` != "2P") %>%
View()
aaa = dt %>%
filter(gate_type == "gate" & `car-type` != "2P")
per_car %>%
filter(`car-id` %in% unique(aaa$`car-id`)) %>%
View()
View(aaa)
View(per_car)
library(kableExtra)
kable(mtcars, 'latex', booktabs = T, caption = "aaa")
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa")
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling()
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(table.envir = 'centering')
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', )
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}\n", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}.*\n", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
cleanup <- function(x) {
x <- sub("\\\\begin\\{table\\}[^\n.]*\n", "", x)
x <- sub("\\\\end\\{table\\}", "", x)
return(x)
}
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', ) %>% cleanup()
kable(mtcars[1:3, 1:3], 'latex', booktabs = T, caption = "aaa") %>% kable_styling(latex_options = c("HOLD_position"), table.envir = 'centering', )
MySeq <- "ATGTGTTGCTGG"
library(stringi)
stri_sub(MySeq, seq(1, stri_length(MySeq), by=3), length=3)
library(tidyverse)
library(lubridate)
separate_visit = function(gate_types) {
out = integer(length(gate_types))
visit_num = 0
seen = 0
for (i in seq(length(gate_types))) {
out[i] = visit_num
if (gate_types[i] == "entrance") {
if (seen == 0) {
seen = 1
} else {
seen = 0
visit_num = visit_num + 1
}
}
}
return(out)
}
dt = read_csv("Lekagul Sensor Data.csv")
dt = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp),
hr = lubridate::hour(Timestamp),
weekday = lubridate::wday(Timestamp),
gate_type = stringr::str_remove(`gate-name`, '[0-9]$')
)
nested_dt = dt %>%
group_by(`car-id`) %>%
nest()
nested_dt = nested_dt %>%
mutate(data = map(data, function(x) {
x$visit = separate_visit(x$gate_type)
x$total_visit_count = max(x$visit) + 1
return(x)
}))
dt = unnest(nested_dt, cols = c(data)) %>%
ungroup()
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(as.duration(Timestamp[n()] - Timestamp[1]))/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_camping = sum(gate_type == "camping"),
num_rangerbase = sum(gate_type == "ranger-base"),
num_gate = sum(gate_type == "gate")
)
per_car = per_visit %>%
group_by(`car-type`, `car-id`) %>%
summarise(
total_visit = n(),
total_stay_duration = sum(stay_duration),
total_stops = sum(stops),
total_num_generalgate = sum(num_generalgate),
total_num_rangerstop = sum(num_rangerstop),
total_num_camping = sum(num_camping),
total_num_rangerbase = sum(num_rangerbase),
total_num_gate = sum(num_gate)
)
View(per_visit)
per_visit$start_time[1]
seq(per_visit$start_time[1], per_visit$end_time[1])
seq(as_date(per_visit$start_time[1]), as_date(per_visit$end_time[1]))
seq(as_date(per_visit$start_time[1]), as_date(per_visit$end_time[1]), by = 1)
seq(per_visit$start_time[1], per_visit$end_time[1], by = 1)
per_visit %>%
group_by(`car-type`, `car-id`, visit) %>%
nest() %>%
mutate(data = map(data, ~seq(as_date(.x$start_time[1]), as_date(.x$end_time[1]), by = 1)))
daily_visitor = per_visit %>%
group_by(`car-type`, `car-id`, visit) %>%
nest() %>%
mutate(data = map(data, ~seq(as_date(.x$start_time[1]), as_date(.x$end_time[1]), by = 1))) %>%
unnest()
daily_visitor %>%
group_by(data, `car-type`) %>%
count()
daily_visitor = per_visit %>%
group_by(`car-type`, `car-id`, visit) %>%
nest() %>%
mutate(data = map(data, ~seq(as_date(.x$start_time[1]), as_date(.x$end_time[1]), by = 1))) %>%
unnest(cols = c(data)) %>%
group_by(data, `car-type`) %>%
count()
daily_visitor %>%
ggplot(aes(x = data, y = n, fill = `car-type`)) +
geom_bar(stat = "identity")
daily_visitor = per_visit %>%
group_by(`car-type`, `car-id`, visit) %>%
nest() %>%
mutate(data = map(data, ~seq(as_date(.x$start_time[1]), as_date(.x$end_time[1]), by = 1))) %>%
unnest(cols = c(data))
daily_visitor = per_visit %>%
group_by(`car-type`, `car-id`, visit) %>%
nest() %>%
mutate(data = map(data, ~seq(as_date(.x$start_time[1]), as_date(.x$end_time[1]), by = 1))) %>%
unnest(cols = c(data))
daily_type_count = group_by(data, `car-type`) %>%
count()
daily_type_count = daily_visitor %>%
group_by(data, `car-type`) %>%
count()
daily_type_count %>%
ggplot(aes(x = data, y = n, fill = `car-type`)) +
geom_bar(stat = "identity")
View(daily_visitor)
daily_visitor %>%
group_by(`car-type`, `car-id`, visit) %>%
count()
daily_visitor %>%
group_by(`car-type`, `car-id`, visit) %>%
count() %>%
ungroup() %>%
group_by(`car_type`) %>%
summary(
mean = mean(n),
sd = sd(n)
)
daily_visitor %>%
group_by(`car-type`, `car-id`, visit) %>%
count() %>%
ungroup() %>%
group_by(`car-type`) %>%
summary(
mean = mean(n),
sd = sd(n)
)
daily_visitor %>%
group_by(`car-type`, `car-id`, visit) %>%
count() %>%
ungroup() %>%
group_by(`car-type`) %>%
summarize(
mean = mean(n),
sd = sd(n)
)
daily_type_count %>%
mutate(month = month(data)) %>%
ggplot(aes(x = month, y = n, fill = `car-type`)) +
geom_bar(stat = "identity")
lubridate::floor_date(daily_type_count$data, "month")
daily_type_count %>%
mutate(month = floor_date(data, "month")) %>%
ggplot(aes(x = month, y = n, fill = `car-type`)) +
geom_bar(stat = "identity")
daily_type_count = daily_visitor %>%
mutate(month = floor_date(data, "month")) %>%
group_by(month, `car-type`) %>%
count()
daily_type_count %>%
ggplot(aes(x = month, y = n, fill = `car-type`)) +
geom_bar(stat = "identity")
View(daily_visitor)
daily_type_count = daily_visitor %>%
group_by(data, `car-type`) %>%
count()
daily_type_count %>%
ggplot(aes(x = data, y = n, fill = `car-type`)) +
geom_bar(stat = "identity")
daily_type_count %>%
ggplot(aes(x = data, y = n, fill = `car-type`)) +
geom_line()
stat = "identity"
daily_type_count %>%
ggplot(aes(x = data, y = n, fill = `car-type`)) +
geom_line(stat = "identity")
daily_type_count %>%
ggplot(aes(x = data, y = n, fill = `car-type`)) +
geom_bar(stat = "identity")
library(tidyverse)
library(lubridate)
separate_visit = function(gate_types) {
out = integer(length(gate_types))
visit_num = 0
seen = 0
for (i in seq(length(gate_types))) {
out[i] = visit_num
if (gate_types[i] == "entrance") {
if (seen == 0) {
seen = 1
} else {
seen = 0
visit_num = visit_num + 1
}
}
}
return(out)
}
dt = read_csv("Lekagul Sensor Data.csv")
dt = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp),
hr = lubridate::hour(Timestamp),
weekday = lubridate::wday(Timestamp),
gate_type = stringr::str_remove(`gate-name`, '[0-9]$')
)
nested_dt = dt %>%
group_by(`car-id`) %>%
nest()
nested_dt = nested_dt %>%
mutate(data = map(data, function(x) {
x$visit = separate_visit(x$gate_type)
x$total_visit_count = max(x$visit) + 1
return(x)
}))
dt = unnest(nested_dt, cols = c(data)) %>%
ungroup()
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(as.duration(Timestamp[n()] - Timestamp[1]))/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_camping = sum(gate_type == "camping"),
num_rangerbase = sum(gate_type == "ranger-base"),
num_gate = sum(gate_type == "gate")
)
per_car = per_visit %>%
group_by(`car-type`, `car-id`) %>%
summarise(
total_visit = n(),
total_stay_duration = sum(stay_duration),
total_stops = sum(stops),
total_num_generalgate = sum(num_generalgate),
total_num_rangerstop = sum(num_rangerstop),
total_num_camping = sum(num_camping),
total_num_rangerbase = sum(num_rangerbase),
total_num_gate = sum(num_gate)
)
jsonlite::read_json("tsne.json")
tsne = jsonlite::read_json("docs/tsne.json")
tsne[[1]]
tsne = jsonlite::fromJSON("docs/tsne.json")
View(tsne)
tsne = jsonlite::fromJSON("docs/tsne.json", simplifyDataFrame = T)
View(tsne)
tsne = jsonlite::fromJSON(
"docs/tsne.json", simplifyDataFrame = T,
flatten = T
)
View(tsne)
tsne = jsonlite::read_json("docs/tsne.json")
View(tsne)
map_df(tsne, ~data_frame(x = .x$x, y = .x$y))
aaa = map_df(tsne, ~tibble(x = .x$x, y = .x$y))
View(aaa)
View(per_car)
View(per_car)
per_car$x = aaa$x
per_car$y = aaa$y
jsonlite::write_json(per_car, "per_car.json")
per_car_lite = per_car
View(per_car_lite)
per_car_lite$total_stay_duration = round(per_car_lite$total_stay_duration, 1)
per_car_lite$x = round(per_car_lite$x, 2)
per_car_lite$y = round(per_car_lite$y, 2)
names(per_car_lite)
names(per_car_lite) = c("tp", "id", "v", "d", "ts", "gg",
"rs", "c", "rb", "g", "x", "y")
jsonlite::write_json(per_car_lite, "per_car.json")
range(per_car_lite$x)
range(per_car_lite$y)
viridisLite::viridis(7)
paste(paste0('"', viridisLite::viridis(7), '"'), collapse = ", ")
viridisLite::viridis(7)
per_car
names(per_car)
per_car_lite
per_car_lite %>% sample_frac()
per_car_lite %>% ungroup() %>% sample_frac()
per_car_lite = per_car_lite %>% ungroup() %>% sample_frac()
jsonlite::write_json(per_car_lite, "per_car.json")
names(dt)
dt %>%
select(id, Timestamp, `gate-name`, visit) %>%
rename(Timestamp = ts)
dt %>%
select(`car-id`, Timestamp, `gate-name`, visit) %>%
rename(id = `car-id`, Timestamp = ts)
dt %>%
select(`car-id`, Timestamp, `gate-name`, visit) %>%
rename(id = `car-id`, ts = Timestamp)
dt %>%
select(`car-id`, Timestamp, `gate-name`, visit) %>%
rename(i = `car-id`, t = Timestamp, g = `gate-name`, v = visit)
dt %>%
select(`car-id`, Timestamp, `gate-name`, visit) %>%
rename(i = `car-id`, t = Timestamp, g = `gate-name`, v = visit) %>%
jsonlite::write_json("dtlite.json")
unique(dt$`gate-name`)
sort(unique(dt$`gate-name`))
gates_id = 1:length(gates) - 1
gates = sort(unique(dt$`gate-name`))
gates_id = 1:length(gates) - 1
gate_tbl = tibble(id = gates_id, lbl=gates)
jsonlite::toJSON(gate_tbl)
jsonlite::toJSON(gate_tbl, dataframe = "columns")
jsonlite::toJSON(gate_tbl, dataframe = "values")
jsonlite::toJSON(gate_tbl$lbl, dataframe = "values")
dt %>%
select(`car-id`, Timestamp, `gate-name`, visit) %>%
mutate(g = as.integer(factor(`gate-name`)))
dt %>%
select(`car-id`, Timestamp, `gate-name`, visit) %>%
mutate(g = as.integer(factor(`gate-name`))) %>% View()
dt %>%
select(`car-id`, Timestamp, `gate-name`, visit) %>%
mutate(g = as.integer(factor(`gate-name`)) - 1) %>% View()
dt %>%
mutate(g = as.integer(factor(`gate-name`)) - 1,
i = as.integer(factor(`car-id`)) - 1) %>%
select(i, Timestamp, g, visit) %>%
rename(t = Timestamp,  v = visit) %>%
jsonlite::write_json("dtlite.json")
car_ids = sort(unique(dt$`car-id`))
jsonlite::toJSON(car_ids, dataframe = "values")
dt %>%
mutate(g = as.integer(factor(`gate-name`)) - 1,
# i = as.integer(factor(`car-id`)) - 1
i = `car-id`
) %>%
select(i, Timestamp, g, visit) %>%
rename(t = Timestamp,  v = visit) %>%
jsonlite::write_json("dtlite.json")
per_car_lite = per_car_lite %>% ungroup() %>% sample_frac()
jsonlite::write_json(per_car_lite, "per_car2.json")
per_car_lite %>% filter(v > 40)
per_car_lite
max(per_car_lite$v)
max(per_car$total_visit)
per_car_lite %>% filter(v != 1)
viridisLite::inferno(256)
jsonlite::toJSON(viridisLite::inferno(256))
per_car %>% filter(v > 10)
per_car_lite %>% filter(v > 10)
per_car_lite = per_car_lite %>% ungroup() %>% sample_frac()
jsonlite::write_json(per_car_lite, "per_car2.json")
library(tidyverse)
library(lubridate)
separate_visit = function(gate_types) {
out = integer(length(gate_types))
visit_num = 0
seen = 0
for (i in seq(length(gate_types))) {
out[i] = visit_num
if (gate_types[i] == "entrance") {
if (seen == 0) {
seen = 1
} else {
seen = 0
visit_num = visit_num + 1
}
}
}
return(out)
}
dt = read_csv("Lekagul Sensor Data.csv")
dt = dt %>%
mutate(
Timestamp = lubridate::as_datetime(Timestamp),
date = lubridate::as_date(Timestamp),
hr = lubridate::hour(Timestamp),
weekday = lubridate::wday(Timestamp),
gate_type = stringr::str_remove(`gate-name`, '[0-9]$')
)
nested_dt = dt %>%
group_by(`car-id`) %>%
nest()
nested_dt = nested_dt %>%
mutate(data = map(data, function(x) {
x$visit = separate_visit(x$gate_type)
x$total_visit_count = max(x$visit) + 1
return(x)
}))
dt = unnest(nested_dt, cols = c(data)) %>%
ungroup()
per_visit = dt %>%
group_by(`car-type`, `car-id`, visit) %>%
summarise(
start_time = Timestamp[1],
end_time = Timestamp[n()],
stay_duration = as.numeric(as.duration(Timestamp[n()] - Timestamp[1]))/3600,
stops = n(),
num_generalgate = sum(gate_type == "general-gate"),
num_rangerstop = sum(gate_type == "ranger-stop"),
num_camping = sum(gate_type == "camping"),
num_rangerbase = sum(gate_type == "ranger-base"),
num_gate = sum(gate_type == "gate")
)
per_car = per_visit %>%
group_by(`car-type`, `car-id`) %>%
summarise(
total_visit = n(),
total_stay_duration = sum(stay_duration),
total_stops = sum(stops),
total_num_generalgate = sum(num_generalgate),
total_num_rangerstop = sum(num_rangerstop),
total_num_camping = sum(num_camping),
total_num_rangerbase = sum(num_rangerbase),
total_num_gate = sum(num_gate)
)
tsne = jsonlite::read_json("docs/tsne_jitter.json")
aaa = map_df(tsne, ~tibble(x = .x$x, y = .x$y))
per_car$x = aaa$x
per_car$y = aaa$y
per_car_lite = per_car
per_car_lite$total_stay_duration = round(per_car_lite$total_stay_duration, 1)
per_car_lite$x = round(per_car_lite$x, 2)
per_car_lite$y = round(per_car_lite$y, 2)
names(per_car_lite) = c("tp", "id", "v", "d", "ts", "gg",
"rs", "c", "rb", "g", "x", "y")
per_car_lite = per_car_lite %>% ungroup() %>% sample_frac()
jsonlite::write_json(per_car_lite, "per_car3.json")
tsne = jsonlite::read_json("docs/tsne_jitter.json")
aaa = map_df(tsne, ~tibble(x = .x$x, y = .x$y))
per_car$x = aaa$x
per_car$y = aaa$y
per_car_lite = per_car
per_car_lite$total_stay_duration = round(per_car_lite$total_stay_duration, 1)
per_car_lite$x = round(per_car_lite$x, 2)
per_car_lite$y = round(per_car_lite$y, 2)
names(per_car_lite) = c("tp", "id", "v", "d", "ts", "gg",
"rs", "c", "rb", "g", "x", "y")
per_car_lite = per_car_lite %>% ungroup() %>% sample_frac()
jsonlite::write_json(per_car_lite, "per_car3.json")
tsne = jsonlite::read_json("docs/tsne_jitter.json")
aaa = map_df(tsne, ~tibble(x = .x$x, y = .x$y))
per_car$x = aaa$x
per_car$y = aaa$y
per_car_lite = per_car
per_car_lite$total_stay_duration = round(per_car_lite$total_stay_duration, 1)
per_car_lite$x = round(per_car_lite$x, 2)
per_car_lite$y = round(per_car_lite$y, 2)
names(per_car_lite) = c("tp", "id", "v", "d", "ts", "gg",
"rs", "c", "rb", "g", "x", "y")
per_car_lite = per_car_lite %>% ungroup() %>% sample_frac()
jsonlite::write_json(per_car_lite, "per_car3.json")
per_car_lite = per_car_lite %>% ungroup() %>% sample_frac()
unique(per_car_lite$tp)
per_car_lite_group7 = per_car_lite %>%
filter(tp == "2P")
per_car_lite = per_car_lite %>%
filter(tp != "2P") %>%
bind_rows(per_car_lite_group7)
per_car_lite$tp
per_car_lite_nongroup2p = per_car_lite %>%
filter(tp != "2P")
per_car_lite = per_car_lite %>%
filter(tp == "2P") %>%
bind_rows(per_car_lite_nongroup2p)
per_car_lite$tp
jsonlite::write_json(per_car_lite, "per_car3.json")
